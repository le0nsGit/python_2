from warnings import warn

warn("IPython.utils.pickleutil has moved to ipykernel.pickleutil", stacklevel=2)

from ipykernel.pickleutil import *

    """
    Args:
        profile:
    """
    """
    Args:
        module_str:
    """
    """Return the XDG_CACHE_HOME, if it is defined and exists, else None.

    This is only for non-OS X posix (Linux,Unix,etc.) systems.
    """
    """Return the XDG_CONFIG_HOME, if it is defined and exists, else None.

    This is only for non-OS X posix (Linux,Unix,etc.) systems.
    """
    """Return the 'home' directory, as a unicode string.

    Uses os.path.expanduser('~'), and checks for writability.
    """Whether `path` is a directory, to which the user has write access.

    Args:
        path:
    """
    See stdlib docs for how this is determined. For Python <3.8, $HOME is
    first priority on *ALL* platforms. For Python >=3.8 on Windows, %HOME% is no
    longer considered.

        """Get a long path name (expand ~) on Windows using ctypes.

        Examples:
            >>> get_long_path_name('c:\\docume~1')
            'c:\\\\Documents and Settings'

        Args:
            path:
        """
    """Find a file by looking through a sequence of paths.

    This iterates through a sequence of paths looking for a file and returns
    the full, absolute path of the first occurrence of the file. If no set of
    path dirs is given, the filename is tested as is, after running through
    :func:`expandvars` and :func:`expanduser`. Thus a simple call::

        filefind('myfile.txt')

    will find the file in the current working dir, but::

        filefind('~/myfile.txt')

    Will find the file in the users home directory. This function does not
    automatically try any paths, such as the cwd or the user's home directory.

    Args:
        filename (str): The filename to look for.
        path_dirs (str, None or sequence of str): The sequence of paths to look
            for the file in. If None, the filename need to be absolute or be in
            the cwd. If a string, the string is put into a sequence and the
            searched. If a sequence, walk through each element and join with
    """Expand a path into its long form.

    On Windows this expands any ~ in the paths. On other platforms, it is a
    null operation.

    Args:
        path:
    """
    """
    """Return a valid python filename in the current directory.

    If the given name is not a file, it adds '.py' and searches again. Raises
    """On Windows, remove leading and trailing quotes from filenames.

    This function has been deprecated and should not be used any more:
    unquoting is now taken care of by :func:`IPython.utils.process.arg_split`.

    Args:
        name:
        win32:
    """
    """
    """Reverse of :func:`os.path.expanduser`

    Args:
        path:
    """